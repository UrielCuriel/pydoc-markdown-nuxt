"""
Nuxt Content renderer for pydoc-markdown

This module provides a renderer that generates documentation compatible with
Nuxt Content and MDC (Markdown Components) syntax.
"""

from __future__ import annotations

import dataclasses
import logging
import os
import typing as t
from pathlib import Path

import docspec
import yaml

from pydoc_markdown.contrib.renderers.markdown import MarkdownRenderer
from pydoc_markdown.interfaces import Context, Renderer, Resolver
from pydoc_markdown.util.knownfiles import KnownFiles
from pydoc_markdown.util.pages import GenericPage, Pages

logger = logging.getLogger(__name__)


@dataclasses.dataclass
class NuxtPage(GenericPage["NuxtPage"]):
    """
    A page configuration for Nuxt Content.
    
    ### Options
    """
    
    children: t.List["NuxtPage"] = dataclasses.field(default_factory=list)
    
    #: The frontmatter for the page. This will be serialized as YAML at the top of the file.
    frontmatter: t.Dict[str, t.Any] = dataclasses.field(default_factory=dict)
    
    #: Override the directory that this page is rendered into (relative to the content directory).
    directory: t.Optional[str] = None
    
    #: The file extension to use for the page. Defaults to ".md"
    extension: str = ".md"


@dataclasses.dataclass
class NuxtRenderer(Renderer):
    """
    A renderer for Nuxt Content. This renderer generates Markdown files with YAML frontmatter
    that are compatible with Nuxt Content and can utilize MDC (Markdown Components) syntax.
    
    Nuxt Content uses a file-based routing system where Markdown files in the `content/`
    directory are automatically available as pages. This renderer outputs files in a structure
    that follows Nuxt Content conventions.
    
    ### Example Configuration
    
    ```yaml
    renderers:
      - type: nuxt
        content_directory: content/docs
        default_frontmatter:
          layout: default
          navigation: true
        pages:
          - title: Home
            name: index
            source: README.md
          - title: API Documentation
            contents:
              - '*'
    ```
    
    ### Options
    """
    
    #: The directory where all generated content files are placed. Default: `content`
    content_directory: str = "content"
    
    #: Clean up files that were previously generated by the renderer before the next
    #: render pass. Defaults to `True`.
    clean_render: bool = True
    
    #: The pages to render.
    pages: Pages[NuxtPage] = dataclasses.field(default_factory=Pages)
    
    #: Default frontmatter that is applied to every page. This will be merged with
    #: each page's individual frontmatter.
    default_frontmatter: t.Dict[str, t.Any] = dataclasses.field(default_factory=dict)
    
    #: The #MarkdownRenderer configuration.
    markdown: MarkdownRenderer = dataclasses.field(default_factory=MarkdownRenderer)
    
    #: Whether to use MDC syntax for enhanced components. When enabled, the renderer
    #: will generate content using MDC-compatible syntax for things like code blocks,
    #: alerts, etc.
    use_mdc: bool = True
    
    #: The base URL for the documentation (used for navigation and links)
    base_url: str = "/"

    def __post_init__(self) -> None:
        self._context: Context

    def init(self, context: Context) -> None:
        self._context = context

    def _render_page(self, modules: t.List[docspec.Module], page: NuxtPage, filename: str) -> None:
        """Render a single page to a file."""
        os.makedirs(os.path.dirname(filename), exist_ok=True)
        
        # Merge default frontmatter with page-specific frontmatter
        frontmatter = {**self.default_frontmatter, **page.frontmatter}
        
        # Add title if not explicitly set
        if "title" not in frontmatter:
            frontmatter["title"] = page.title

        def _write_prefix(fp: t.TextIO) -> None:
            """Write the YAML frontmatter at the beginning of the file."""
            fp.write("---\n")
            fp.write(yaml.safe_dump(frontmatter, default_flow_style=False))
            fp.write("---\n\n")

        page.render(filename, modules, self.markdown, self._context.directory, _write_prefix)

    def render(self, modules: t.List[docspec.Module]) -> None:
        """Render all pages to the content directory."""
        logger.info(f"Rendering documentation to {self.content_directory}")
        
        # Create content directory if it doesn't exist
        os.makedirs(self.content_directory, exist_ok=True)
        
        known_files = KnownFiles(self.content_directory)
        
        if self.clean_render:
            # Remove previously generated files
            for file_ in known_files.load():
                try:
                    os.remove(file_.name)
                    logger.debug(f"Removed {file_.name}")
                except FileNotFoundError:
                    pass

        # Render all pages
        with known_files:
            for item in self.pages.iter_hierarchy():
                page = item.page
                
                # Handle custom directory override
                if hasattr(page, 'directory') and page.directory:
                    # Custom directory handling for NuxtPage
                    directory = os.path.join(self.content_directory, page.directory)
                    filename = os.path.join(directory, page.name + page.extension)
                else:
                    # Use default filename generation
                    filename = item.filename(
                        self.content_directory,
                        page.extension,
                        skip_empty_pages=False
                    )
                
                if filename:
                    self._render_page(modules, page, filename)
                    known_files.append(filename)
                    logger.info(f"Rendered {filename}")

    def get_resolver(self, modules: t.List[docspec.Module]) -> t.Optional[Resolver]:
        """Get a resolver for cross-references."""
        return self.markdown.get_resolver(modules)